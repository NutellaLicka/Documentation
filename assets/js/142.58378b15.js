(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{379:function(a,s,t){"use strict";t.r(s);var e=t(2),n=Object(e.a)({},function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"setup-komodo-notary-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup-komodo-notary-node","aria-hidden":"true"}},[a._v("#")]),a._v(" Setup Komodo Notary Node")]),a._v(" "),t("h2",{attrs:{id:"note"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[a._v("#")]),a._v(" Note")]),a._v(" "),t("p",[a._v("This guide is still in "),t("em",[a._v("BETA")]),a._v(" phase. It is here is to give you a good understanding on building a Komodo Notary Node. It is possible that some commands could be deprecated by the time you read it.")]),a._v(" "),t("p",[a._v("If you have any problems, please join "),t("code",[a._v("#notarynode")]),a._v(" on the "),t("a",{attrs:{href:"https://komodoplatform.com/discord",target:"_blank",rel:"noopener noreferrer"}},[a._v("Komodo Discord"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"requirements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requirements","aria-hidden":"true"}},[a._v("#")]),a._v(" Requirements")]),a._v(" "),t("h3",{attrs:{id:"hardware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hardware","aria-hidden":"true"}},[a._v("#")]),a._v(" Hardware")]),a._v(" "),t("p",[a._v("Komodo currently only works on Linux. To setup Komodo Notary Node be sure you have a good solid server with the following requirements:")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("CPU: A good CPU (Xeon/i7)")])]),a._v(" "),t("li",[t("p",[a._v("RAM: 64GB")])]),a._v(" "),t("li",[t("p",[a._v("Disk: 500GB SSD")])]),a._v(" "),t("li",[t("p",[a._v("Bandwidth: 100Mbps")])])]),a._v(" "),t("h3",{attrs:{id:"operating-system"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#operating-system","aria-hidden":"true"}},[a._v("#")]),a._v(" Operating System")]),a._v(" "),t("p",[a._v("Ubuntu LTS x64 - minimal installation with Openssh server.")]),a._v(" "),t("h2",{attrs:{id:"security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#security","aria-hidden":"true"}},[a._v("#")]),a._v(" Security")]),a._v(" "),t("p",[t("em",[a._v("Before doing anything further, please ensure that your server is secure.")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Update the Operating System: "),t("code",[a._v("sudo apt-get update && sudo apt-get upgrade -y")])])]),a._v(" "),t("li",[t("p",[a._v("Install "),t("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fail2ban"),t("OutboundLink")],1),a._v(".")])]),a._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04",target:"_blank",rel:"noopener noreferrer"}},[a._v("Perform Initial Setup for creating new user, give "),t("code",[a._v("sudo")]),a._v(" permission, change SSH port, disable "),t("code",[a._v("root")]),a._v(" login, disable password authentication for login"),t("OutboundLink")],1)])]),a._v(" "),t("li",[t("p",[a._v("Please run processes as an unprivileged user and use "),t("code",[a._v("sudo")]),a._v(" where necessary")])])]),a._v(" "),t("p",[t("strong",[a._v("Here is a repo with automated script to prepare your fresh Ubuntu server with initial setup https://github.com/webworker01/freshubuntu")])]),a._v(" "),t("h2",{attrs:{id:"install-dependencies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-dependencies","aria-hidden":"true"}},[a._v("#")]),a._v(" Install Dependencies")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" upgrade -y\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool libncurses-dev "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("unzip")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" python zlib1g-dev "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" bsdmainutils automake libboost-all-dev libssl-dev libprotobuf-dev protobuf-compiler libgtest-dev libqt4-dev libqrencode-dev libdb++-dev ntp ntpdate software-properties-common libevent-dev "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" libcurl4-gnutls-dev cmake clang libsodium-dev jq "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("htop")]),a._v(" -y\n")])])]),t("h2",{attrs:{id:"install-nanomsg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-nanomsg","aria-hidden":"true"}},[a._v("#")]),a._v(" Install "),t("code",[a._v("nanomsg")])]),a._v(" "),t("p",[a._v("Required by iguana")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/nanomsg/nanomsg\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" nanomsg\ncmake "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(".")]),a._v(" -DNN_TESTS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("OFF -DNN_ENABLE_DOC"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("OFF\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j2\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" ldconfig\n")])])]),t("h2",{attrs:{id:"install-komodo-by-compiling-it-from-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-komodo-by-compiling-it-from-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Install Komodo by compiling it from source")]),a._v(" "),t("h3",{attrs:{id:"clone-the-source-checkout-beta-branch-and-compile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone-the-source-checkout-beta-branch-and-compile","aria-hidden":"true"}},[a._v("#")]),a._v(" Clone the source, checkout "),t("code",[a._v("beta")]),a._v(" branch and compile")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/jl777/komodo\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" komodo\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout beta\n./zcutil/fetch-params.sh\n./zcutil/build.sh -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("p",[t("code",[a._v("-j$(nproc)")]),a._v(" uses all available processor threads while compiling. If you don't want to use all threads, you can use "),t("code",[a._v("-j8")]),a._v(" which will use only 8 threads.")]),a._v(" "),t("h3",{attrs:{id:"symlink-the-compiled-binaries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symlink-the-compiled-binaries","aria-hidden":"true"}},[a._v("#")]),a._v(" Symlink the compiled binaries")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/komodo/src/komodo-cli /usr/local/bin/komodo-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/komodo/src/komodod /usr/local/bin/komodod\n")])])]),t("h3",{attrs:{id:"create-the-data-dir-komodo-conf-file-and-secure-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-the-data-dir-komodo-conf-file-and-secure-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Create the data dir, "),t("code",[a._v("komodo.conf")]),a._v(" file and secure it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .komodo\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.komodo/komodo.conf\n")])])]),t("p",[a._v("Add the following lines to the "),t("code",[a._v("komodo.conf")]),a._v(" file and save it (replace rpcuser and rpcpassword)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("rpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("usernameChangeItToSomethingSecure\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("passwordChangeItToSomethingSecure\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nserver"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcworkqueue"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("256\nrpcbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("komodo.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.komodo/komodo.conf\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"compile-bitcoin-and-other-3rd-party-coins-from-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compile-bitcoin-and-other-3rd-party-coins-from-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Compile Bitcoin and other 3rd-party Coins from Source")]),a._v(" "),t("h3",{attrs:{id:"bitcoin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitcoin","aria-hidden":"true"}},[a._v("#")]),a._v(" Bitcoin")]),a._v(" "),t("h4",{attrs:{id:"step-1-clone-bitcoin-source-code-and-checkout-version-16-x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-bitcoin-source-code-and-checkout-version-16-x","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 1: Clone Bitcoin source-code and checkout version 16.x")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/bitcoin/bitcoin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" bitcoin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 0.16\n")])])]),t("h4",{attrs:{id:"step-2-create-a-build-script"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),t("p",[a._v("Name the script as "),t("code",[a._v("build.sh")]),a._v(" inside the "),t("code",[a._v("~/bitcoin")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks gor the binaries at "),t("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),t("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\nberkeleydb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    BITCOIN_ROOT"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n    BITCOIN_PREFIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BITCOIN_ROOT}")]),a._v('/db4"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$BITCOIN_PREFIX")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -N "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sha256sum -c\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xzvf db-4.8.30.NC.tar.gz\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" db-4.8.30.NC/build_unix/\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/dist/configure -enable-cxx -disable-shared -with-pic -prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$BITCOIN_PREFIX")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$BITCOIN_ROOT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nbuildBITCOIN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" clean\n    ./autogen.sh\n    ./configure LDFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-L'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BITCOIN_PREFIX}")]),a._v('/lib/"')]),a._v(" CPPFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-I'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BITCOIN_PREFIX}")]),a._v('/include/"')]),a._v(" --with-gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/bitcoin\nberkeleydb\nbuildBITCOIN\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/bitcoin/src/bitcoin-cli /usr/local/bin/bitcoin-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/bitcoin/src/bitcoind /usr/local/bin/bitcoind\n")])])]),t("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),t("h4",{attrs:{id:"step-4-create-bitcoin-data-dir-bitcoin-conf-file-and-restrict-access-to-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-bitcoin-data-dir-bitcoin-conf-file-and-restrict-access-to-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 4: Create Bitcoin data dir, "),t("code",[a._v("bitcoin.conf")]),a._v(" file and restrict access to it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .bitcoin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.bitcoin/bitcoin.conf\n")])])]),t("p",[a._v("Insert the following contents inside the "),t("code",[a._v("bitcoin.conf")]),a._v(" file and save it. (change the "),t("code",[a._v("rpcuser")]),a._v(" and "),t("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("bitcoinrpc\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\nbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\nrpcbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("bitcoin.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.bitcoin/bitcoin.conf\n")])])]),t("h3",{attrs:{id:"chips"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chips","aria-hidden":"true"}},[a._v("#")]),a._v(" Chips")]),a._v(" "),t("h4",{attrs:{id:"step-1-clone-chips-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-chips-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 1: Clone CHIPS source")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/jl777/chips3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" chips3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout dev\n")])])]),t("h4",{attrs:{id:"step-2-create-a-build-script-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-2","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),t("p",[a._v("Name the script as "),t("code",[a._v("build.sh")]),a._v(" inside the "),t("code",[a._v("~/chips3")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks gor the binaries at "),t("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),t("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\nberkeleydb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    CHIPS_ROOT"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n    CHIPS_PREFIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${CHIPS_ROOT}")]),a._v('/db4"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$CHIPS_PREFIX")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -N "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sha256sum -c\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xzvf db-4.8.30.NC.tar.gz\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" db-4.8.30.NC/build_unix/\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/dist/configure -enable-cxx -disable-shared -with-pic -prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$CHIPS_PREFIX")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$CHIPS_ROOT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nbuildCHIPS "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" clean\n    ./autogen.sh\n    ./configure LDFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-L'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${CHIPS_PREFIX}")]),a._v('/lib/"')]),a._v(" CPPFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-I'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${CHIPS_PREFIX}")]),a._v('/include/"')]),a._v(" --with-gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/chips3\nberkeleydb\nbuildCHIPS\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/chips3/src/chips-cli /usr/local/bin/chips-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/chips3/src/chipsd /usr/local/bin/chipsd\n")])])]),t("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-2","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),t("h4",{attrs:{id:"step-4-create-chips-data-dir-chips-conf-file-and-restrict-access-to-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-chips-data-dir-chips-conf-file-and-restrict-access-to-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 4: Create CHIPS data dir, "),t("code",[a._v("chips.conf")]),a._v(" file and restrict access to it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .chips\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.chips/chips.conf\n")])])]),t("p",[a._v("Insert the following contents inside the "),t("code",[a._v("chips.conf")]),a._v(" file and save it. (change the "),t("code",[a._v("rpcuser")]),a._v(" and "),t("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\naddnode"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("5.9.253.195\naddnode"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("74.208.210.191\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("chips.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.chips/chips.conf\n")])])]),t("h3",{attrs:{id:"gamecredits-game"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gamecredits-game","aria-hidden":"true"}},[a._v("#")]),a._v(" GameCredits (GAME)")]),a._v(" "),t("h4",{attrs:{id:"step-1-clone-game-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-game-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 1: Clone GAME source")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/gamecredits-project/GameCredits\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" GameCredits\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),t("h4",{attrs:{id:"step-2-create-a-build-script-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-3","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),t("p",[a._v("Name the script as "),t("code",[a._v("build.sh")]),a._v(" inside the "),t("code",[a._v("~/GameCredits")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks gor the binaries at "),t("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),t("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# GameCredits build script for Ubuntu & Debian 9 v.3 (c) Decker")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Step 1: Build BDB 4.8")]),a._v("\nGAMECREDITS_ROOT"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\nGAMECREDITS_PREFIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GAMECREDITS_ROOT}")]),a._v('/db4"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_PREFIX")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -N "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sha256sum -c\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xzvf db-4.8.30.NC.tar.gz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" db-4.8.30.NC/build_unix/\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/dist/configure -enable-cxx -disable-shared -with-pic -prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_PREFIX")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_ROOT")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Step 2: Build OpenSSL (libssl-dev) 1.0.x")]),a._v("\nversion"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1.0.2o\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p openssl_build\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -qO- http://www.openssl.org/source/openssl-"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$version")]),a._v(".tar.gz "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" xzv\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" openssl-"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$version")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" CFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("-fPIC\n./config no-shared --prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_ROOT")]),a._v("/openssl_build\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" PKG_CONFIG_PATH"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_ROOT")]),a._v('/openssl_build/pkgconfig"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" CXXFLAGS+"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" -I'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_ROOT")]),a._v("/openssl_build/include/ -I"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GAMECREDITS_PREFIX}")]),a._v('/include/"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" LDFLAGS+"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" -L'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GAMECREDITS_ROOT")]),a._v("/openssl_build/lib -L"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GAMECREDITS_PREFIX}")]),a._v('/lib/ -static"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" LIBS+"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-ldl"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# p.s. for Debian added -ldl in LDFLAGS it's enough, but on Ubuntu linker doesn't recognize it, so,")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# we moved -ldl to LIBS and added -static to LDFLAGS, because linker on Ubuntu doesn't understan that")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# it should link librypto.a statically.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Or we can build OpenSSL 1.0.x as shared (instead of no-shared) and use:")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/$USER/GameCredits/openssl_build/lib before")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# starting gamecreditsd.")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Step 3: Build GameCredits daemon")]),a._v("\n./autogen.sh\n./configure --with-gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/GameCredits/src/gamecredits-cli /usr/local/bin/gamecredits-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/GameCredits/src/gamecreditsd /usr/local/bin/gamecreditsd\n")])])]),t("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-3","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),t("h4",{attrs:{id:"step-4-create-game-data-dir-gamecredits-conf-file-and-restrict-access-to-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-game-data-dir-gamecredits-conf-file-and-restrict-access-to-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 4: Create GAME data dir, "),t("code",[a._v("gamecredits.conf")]),a._v(" file and restrict access to it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .gamecredits\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.gamecredits/gamecredits.conf\n")])])]),t("p",[a._v("Insert the following contents inside the "),t("code",[a._v("gamecredits.conf")]),a._v(" file and save it. (change the "),t("code",[a._v("rpcuser")]),a._v(" and "),t("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\nbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\nrpcbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("gamecredits.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.gamecredits/gamecredits.conf\n")])])]),t("h3",{attrs:{id:"einsteinium-emc2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#einsteinium-emc2","aria-hidden":"true"}},[a._v("#")]),a._v(" Einsteinium (EMC2)")]),a._v(" "),t("h4",{attrs:{id:"step-1-clone-emc2-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-emc2-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 1: Clone EMC2 source")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/emc2foundation/einsteinium\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" einsteinium\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),t("h4",{attrs:{id:"step-2-create-a-build-script-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-4","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),t("p",[a._v("Name the script as "),t("code",[a._v("build.sh")]),a._v(" inside the "),t("code",[a._v("~/einsteinium")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks gor the binaries at "),t("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),t("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\nberkeleydb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    EMC2_ROOT"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n    EMC2_PREFIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${EMC2_ROOT}")]),a._v('/db4"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$EMC2_PREFIX")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -N "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sha256sum -c\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xzvf db-4.8.30.NC.tar.gz\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" db-4.8.30.NC/build_unix/\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/dist/configure -enable-cxx -disable-shared -with-pic -prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$EMC2_PREFIX")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$EMC2_ROOT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nbuildEMC2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" clean\n    ./autogen.sh\n    ./configure LDFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-L'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${EMC2_PREFIX}")]),a._v('/lib/"')]),a._v(" CPPFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-I'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${EMC2_PREFIX}")]),a._v('/include/"')]),a._v(" --with-gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/einsteinium\nberkeleydb\nbuildEMC2\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/einsteinium/src/einsteinium-cli /usr/local/bin/einsteinium-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/einsteinium/src/einsteiniumd /usr/local/bin/einsteiniumd\n")])])]),t("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-4","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),t("h4",{attrs:{id:"step-4-create-emc2-data-dir-einsteinium-conf-file-and-restrict-access-to-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-emc2-data-dir-einsteinium-conf-file-and-restrict-access-to-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 4: Create EMC2 data dir, "),t("code",[a._v("einsteinium.conf")]),a._v(" file and restrict access to it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .einsteinium\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.einsteinium/einsteinium.conf\n")])])]),t("p",[a._v("Insert the following contents inside the "),t("code",[a._v("einsteinium.conf")]),a._v(" file and save it. (change the "),t("code",[a._v("rpcuser")]),a._v(" and "),t("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\nbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\nrpcbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("einsteinium.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.einsteinium/einsteinium.conf\n")])])]),t("h3",{attrs:{id:"gincoin-gin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gincoin-gin","aria-hidden":"true"}},[a._v("#")]),a._v(" GinCoin (GIN)")]),a._v(" "),t("h4",{attrs:{id:"step-1-clone-gin-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-gin-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 1: Clone GIN source")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/GIN-coin/gincoin-core\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" gincoin-core\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),t("h4",{attrs:{id:"step-2-create-a-build-script-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-5","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),t("p",[a._v("Name the script as "),t("code",[a._v("build.sh")]),a._v(" inside the "),t("code",[a._v("~/gincoin-core")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks gor the binaries at "),t("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),t("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\nberkeleydb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    GIN_ROOT"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n    GIN_PREFIX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GIN_ROOT}")]),a._v('/db4"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GIN_PREFIX")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" -N "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sha256sum -c\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xzvf db-4.8.30.NC.tar.gz\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" db-4.8.30.NC/build_unix/\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/dist/configure -enable-cxx -disable-shared -with-pic -prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GIN_PREFIX")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$GIN_ROOT")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nbuildgin "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" clean\n    ./autogen.sh\n    ./configure LDFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-L'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GIN_PREFIX}")]),a._v('/lib/"')]),a._v(" CPPFLAGS"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-I'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GIN_PREFIX}")]),a._v('/include/"')]),a._v(" --with-gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared --without-gui\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nberkeleydb\nbuildgin\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/gincoin-core/src/gincoin-cli /usr/local/bin/gincoin-cli\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$USER")]),a._v("/gincoin-core/src/gincoind /usr/local/bin/gincoind\n")])])]),t("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-5","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),t("h4",{attrs:{id:"step-4-create-gin-data-dir-gincoin-conf-file-and-restrict-access-to-it"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-gin-data-dir-gincoin-conf-file-and-restrict-access-to-it","aria-hidden":"true"}},[a._v("#")]),a._v(" Step 4: Create GIN data dir, "),t("code",[a._v("gincoin.conf")]),a._v(" file and restrict access to it")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .gincoincore\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.gincoincore/gincoin.conf\n")])])]),t("p",[a._v("Insert the following contents inside the "),t("code",[a._v("gincoin.conf")]),a._v(" file and save it. (change the "),t("code",[a._v("rpcuser")]),a._v(" and "),t("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ndaemon"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\ntxindex"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1\nrpcuser"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\nrpcpassword"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\nbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\nrpcbind"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("127.0.0.1\n")])])]),t("p",[a._v("Restrict access to the "),t("code",[a._v("gincoin.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 ~/.gincoincore/gincoin.conf\n")])])]),t("h3",{attrs:{id:"hush3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hush3","aria-hidden":"true"}},[a._v("#")]),a._v(" HUSH3")]),a._v(" "),t("h4",{attrs:{id:"clone-hush3-source-and-compile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone-hush3-source-and-compile","aria-hidden":"true"}},[a._v("#")]),a._v(" Clone HUSH3 source and compile")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/MyHush/hush3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" hush3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout dev\n./zcutil/build.sh -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("hr"),a._v(" "),t("h3",{attrs:{id:"veruscoin-vrsc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#veruscoin-vrsc","aria-hidden":"true"}},[a._v("#")]),a._v(" VerusCoin (VRSC)")]),a._v(" "),t("h4",{attrs:{id:"clone-vrsc-source-and-compile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone-vrsc-source-and-compile","aria-hidden":"true"}},[a._v("#")]),a._v(" Clone VRSC source and compile")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/VerusCoin/VerusCoin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" VerusCoin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n./zcutil/build.sh -j"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("h2",{attrs:{id:"start-the-daemons-and-sync-all-the-chains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-the-daemons-and-sync-all-the-chains","aria-hidden":"true"}},[a._v("#")]),a._v(" Start the daemons and sync all the chains")]),a._v(" "),t("p",[a._v("For the first time sync, we will run all the coin daemons normally. Make sure you have successfully compiled all the daemons from the above section. We will create a "),t("code",[a._v("start")]),a._v(" script later in this guide to start the chains with "),t("code",[a._v("-pubkey")]),a._v(" option for notarisation.")]),a._v(" "),t("h3",{attrs:{id:"start-the-3rd-party-coins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-the-3rd-party-coins","aria-hidden":"true"}},[a._v("#")]),a._v(" Start the 3rd-party coins")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("bitcoind "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nchipsd "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\ngamecreditsd "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\neinsteiniumd "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\ngincoind "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n")])])]),t("h3",{attrs:{id:"start-komodo-and-all-the-assetchains-including-vrsc-hush3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-komodo-and-all-the-assetchains-including-vrsc-hush3","aria-hidden":"true"}},[a._v("#")]),a._v(" Start Komodo and all the assetchains including VRSC & HUSH3")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/komodo/src\n./komodod "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n./assetchains.old\n")])])]),t("p",[a._v("Now wait for all the chains to finish syncing. You can check check sync progress by using "),t("code",[a._v("tail -f")]),a._v(" on the "),t("code",[a._v("debug.log")]),a._v(" file in the respective coin data directories. Komodo assetchains have their own data directory inside the "),t("code",[a._v("~/.komodo")]),a._v(" directory.")]),a._v(" "),t("p",[a._v("Commands to tail "),t("code",[a._v("debug.log")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# BTC")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.bitcoin/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# CHIPS")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.chips/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# GAME")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.gamecredits/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# EMC2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.einsteinium/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# GIN")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.gincoincore/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# KMD")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VRSC")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/VRSC/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# HUSH3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/HUSH3/debug.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SUPERNET")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/SUPERNET/debug.log\n")])])]),t("p",[a._v("For any other Komodo assetchain, use the example of VRSC, HUSH3 or SUPERNET and change the path with the coin name accordingly. Wait for all the coins to finish syncing.")]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"generating-pubkey-address-wif-from-your-secure-passphrase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generating-pubkey-address-wif-from-your-secure-passphrase","aria-hidden":"true"}},[a._v("#")]),a._v(" Generating "),t("code",[a._v("pubkey")]),a._v(", "),t("code",[a._v("address")]),a._v(" & "),t("code",[a._v("WIF")]),a._v(" from your secure passphrase")]),a._v(" "),t("p",[a._v("The mainnet notary node operators will have 2 seed phrases (passphrase) which will generate 2 sets of pubkey, address and private key (WIF).")]),a._v(" "),t("p",[t("strong",[a._v("For security, you should never enter your seed phrase or privatekey in any other node than your notary node. If you ever expose a private key for any particular coin, it can be converted to all other coins easily.")])]),a._v(" "),t("h3",{attrs:{id:"generate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate","aria-hidden":"true"}},[a._v("#")]),a._v(" Generate")]),a._v(" "),t("p",[a._v("The mainnet notary node operators need to provide 2 sets of pubkey to Kolo when he asks for it (pubkey starts with "),t("code",[a._v("02")]),a._v(" or "),t("code",[a._v("03")]),a._v("). Follow "),t("router-link",{attrs:{to:"/notary/generate-privkeys-third-party-coins-from-passphrase.html"}},[a._v("this guide")]),a._v(' to generate all the required info in your own server. You will need the "Compressed Public Key", "Compressed WIF" and "Compressed Address" from the output generated by the script. Based on the default seed used in the '),t("code",[a._v("genkomodo.php")]),a._v(" file, we get the following information:")],1),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("Pubkey: 02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1\n\nBTC Address: 1M68ML9dMZZPEdrjncUCe7ZWadAGUxMNyv\nBTC WIF: L24bEAJSkFCdjoQNEcboWfJdsLGLmkBgfGb4TSHnbhEmU9jenaes\n\nKMD Address: RVNKRr2uxPMxJeDwFnTKjdtiLtcs7UzCZn\nKMD WIF: UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\n\nGAME Address: Gdw3mTUaLRAgK7A2iZ8K4suQVnx7VRJ9rf\nGAME WIF: Re6YxHzdQ61rmTuZFVbjmGu9Kqu8VeVJr4G1ihTPFsspAjGiErDL\n\nEMC2 Address: EdF2quz8nWrJDwTbbTTieFYUMGfPsVB5dv\nEMC2 WIF: T7trfubd9dBEWe3EnFYfj1r1pBueqqCaUUVKKEvLAfQvz3JFsNhs\n\nGIN Address: Gdw3mTUaLRAgK7A2iZ8K4suQVnx7VRJ9rf\nGIN WIF: WNejFTXR11LFx2L8wvEKEqvjHkL1D3Aa4CCBdEYQyBzbBKjPLHJQ\n")])])]),t("p",[a._v("CHIPS & all Komodo assetchain including HUSH3 & VRSC uses the same address and WIF format as Komodo (KMD).")]),a._v(" "),t("p",[a._v("It is recommended that you write down the randomly generated seed (24 words) in a piece of paper and type directly into your server. Do not keep the seed saved in your local computer.")]),a._v(" "),t("h3",{attrs:{id:"import-private-keys-into-the-respective-coin-daemons"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-private-keys-into-the-respective-coin-daemons","aria-hidden":"true"}},[a._v("#")]),a._v(" Import private keys into the respective coin daemons")]),a._v(" "),t("p",[t("strong",[a._v("Important: Make sure your daemon is running and fully synced before importing any privkey. Importing key into daemon will trigger rescan which can take some time to finish depending on tx history.")])]),a._v(" "),t("ul",[t("li",[a._v("Follow the below example to import key into your coin daemons:")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("komodo-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\nbitcoin-cli importprivkey WNejFTXR11LFx2L8wvEKEqvjHkL1D3Aa4CCBdEYQyBzbBKjPLHJQ\nchips-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\ngamecredits-cli importprivkey Re6YxHzdQ61rmTuZFVbjmGu9Kqu8VeVJr4G1ihTPFsspAjGiErDL\neinsteinium-cli importprivkey T7trfubd9dBEWe3EnFYfj1r1pBueqqCaUUVKKEvLAfQvz3JFsNhs\ngincoin-cli importprivkey WNejFTXR11LFx2L8wvEKEqvjHkL1D3Aa4CCBdEYQyBzbBKjPLHJQ\nkomodo-cli -ac_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("HUSH3 importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\nkomodo-cli -ac_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("VRSC importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\n")])])]),t("ul",[t("li",[a._v("For all other Komodo assetchains, use the following command to import privkey")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/komodo/src\n./fiat-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\n")])])]),t("p",[a._v("This command will import keys into all assetchains that are using the main Komodo daemon. This may take some time and will display the coin name and address after each import. You can tail the coin specific "),t("code",[a._v("debug.log")]),a._v(" files to check the progress.")]),a._v(" "),t("h3",{attrs:{id:"validate-the-address"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validate-the-address","aria-hidden":"true"}},[a._v("#")]),a._v(" Validate the address")]),a._v(" "),t("p",[a._v("After all the addresses are imported, using the respective "),t("code",[a._v("<COIN>-cli")]),a._v(", validate all addresses and make sure the response has "),t("code",[a._v("ismine:true")]),a._v(". If you have "),t("code",[a._v("ismine:false")]),a._v(", dPoW will not work for that coin. Sample command for that is below.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("komodo-cli validateaddress RVNKRr2uxPMxJeDwFnTKjdtiLtcs7UzCZn\n")])])]),t("h3",{attrs:{id:"create-pubkey-txt-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-pubkey-txt-file","aria-hidden":"true"}},[a._v("#")]),a._v(" Create "),t("code",[a._v("pubkey.txt")]),a._v(" file")]),a._v(" "),t("p",[a._v("We will need to create a "),t("code",[a._v("pubkey.txt")]),a._v(" file inside "),t("code",[a._v("~/komodo/src/")]),a._v(" directory. This will be used to start all assetchains including HUSH3 & VRSC with the "),t("code",[a._v("-pubkey=")]),a._v(" param. "),t("code",[a._v("pubkey.txt")]),a._v(" file should contain only the below information. Change "),t("code",[a._v("02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1")]),a._v(" with your own pubkey.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1\n")])])]),t("h3",{attrs:{id:"stop-all-the-coin-daemons-safely"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stop-all-the-coin-daemons-safely","aria-hidden":"true"}},[a._v("#")]),a._v(" Stop All the Coin Daemons Safely")]),a._v(" "),t("p",[a._v("Never use "),t("code",[a._v("kill -9")]),a._v(" to kill any Coin daemon if you don't like corrupt databases. Always shutdown wallet daemon and iguana gracefully with "),t("code",[a._v("pkill -15 iguana")]),a._v(" or use the below RPC commands for wallets.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("komodo-cli stop\nbitcoin-cli stop\nchips-cli stop\ngamecredits-cli stop\neinsteinium-cli stop\ngincoin-cli stop\nkomodo-cli -ac_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("HUSH3 stop\nkomodo-cli -ac_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("VRSC stop\n")])])]),t("p",[a._v("For all other Komodo assetchains, use the following command to "),t("code",[a._v("stop")]),a._v(" the daemons.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/komodo/src\n./fiat-cli stop\n")])])]),t("h3",{attrs:{id:"after-all-the-chains-daemons-were-stopped-gracefully-let-s-restrict-access-to-all-the-komodo-assetchain-s-conf-files-inside-komodo-dir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#after-all-the-chains-daemons-were-stopped-gracefully-let-s-restrict-access-to-all-the-komodo-assetchain-s-conf-files-inside-komodo-dir","aria-hidden":"true"}},[a._v("#")]),a._v(" After all the chains' daemons were stopped gracefully, let's restrict access to all the Komodo Assetchain's "),t("code",[a._v(".conf")]),a._v(" files inside "),t("code",[a._v("~/.komodo")]),a._v(" dir")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" ~/.komodo -type f -iname "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"*.conf"')]),a._v(" -exec "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 600 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \\"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"setting-up-iguana"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-iguana","aria-hidden":"true"}},[a._v("#")]),a._v(" Setting up Iguana")]),a._v(" "),t("h3",{attrs:{id:"clone-the-source"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone-the-source","aria-hidden":"true"}},[a._v("#")]),a._v(" Clone the source")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/jl777/SuperNET\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" SuperNET/iguana\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout dev\n")])])]),t("h4",{attrs:{id:"copy-the-pubkey-txt-file-that-we-created-earlier-from-the-komodo-src-dir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy-the-pubkey-txt-file-that-we-created-earlier-from-the-komodo-src-dir","aria-hidden":"true"}},[a._v("#")]),a._v(" Copy the "),t("code",[a._v("pubkey.txt")]),a._v(" file that we created earlier from the "),t("code",[a._v("~/komodo/src/")]),a._v(" dir")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" ~/komodo/src/pubkey.txt ~/SuperNET/iguana/pubkey.txt\n")])])]),t("h4",{attrs:{id:"create-wp-7776"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-wp-7776","aria-hidden":"true"}},[a._v("#")]),a._v(" Create "),t("code",[a._v("wp_7776")])]),a._v(" "),t("p",[a._v("Create "),t("code",[a._v("wp_7776")]),a._v(" file inside the "),t("code",[a._v("iguana")]),a._v(" dir with your 24 words passphrase. The file should look as follows (replace "),t("code",[a._v("YOUR VERY SECURE PASSPHRASE")]),a._v(" with your own):")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" --url "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://127.0.0.1:7776"')]),a._v(" --data "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{\\"method\\":\\"walletpassphrase\\",\\"params\\":[\\"YOUR VERY SECURE PASSPHRASE\\", 9999999]}"')]),a._v("\n")])])]),t("h4",{attrs:{id:"make-wp-7776-file-executable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-wp-7776-file-executable","aria-hidden":"true"}},[a._v("#")]),a._v(" Make "),t("code",[a._v("wp_7776")]),a._v(" file executable")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" 700 wp_7776\n")])])]),t("h4",{attrs:{id:"create-userhome-txt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-userhome-txt","aria-hidden":"true"}},[a._v("#")]),a._v(" Create "),t("code",[a._v("userhome.txt")])]),a._v(" "),t("p",[a._v("Create "),t("code",[a._v("userhome.txt")]),a._v(" file inside the "),t("code",[a._v("iguana")]),a._v(" dir with the location of your user's home directory. Here is an example using user "),t("code",[a._v("dextar")]),a._v(" and how the file should look like.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("home/dextar\n")])])]),t("p",[a._v("There shouldn't be any other text or space.")]),a._v(" "),t("h2",{attrs:{id:"set-ulimit-parameters-on-ubuntu-permanently"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-ulimit-parameters-on-ubuntu-permanently","aria-hidden":"true"}},[a._v("#")]),a._v(" Set "),t("code",[a._v("ulimit")]),a._v(" parameters on Ubuntu permanently")]),a._v(" "),t("p",[a._v("By default, the number of open files per user in Ubuntu is 1024. In our case this number is too small so we will increase it.")]),a._v(" "),t("p",[a._v("This is done with the "),t("code",[a._v("ulimit")]),a._v(" command:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ulimit")]),a._v(" -a   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# see all the kernel parameters")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ulimit")]),a._v(" -n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# see the number of open files")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ulimit")]),a._v(" -n 1000000  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  set the number open files to 1000000")]),a._v("\n")])])]),t("p",[a._v("The problem with this way is that the "),t("code",[a._v("ulimit")]),a._v(" parameter is only set currently for this command terminal and user. This means that after a reboot you’ll need to set the parameter again. Do the following to set it permanently:")]),a._v(" "),t("h3",{attrs:{id:"edit-the-etc-security-limits-conf-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edit-the-etc-security-limits-conf-file","aria-hidden":"true"}},[a._v("#")]),a._v(" Edit the "),t("code",[a._v("/etc/security/limits.conf")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" /etc/security/limits.conf\n")])])]),t("p",[a._v("add these lines:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("* soft nofile 1000000\n* hard nofile 1000000\n")])])]),t("p",[a._v("Save and close file")]),a._v(" "),t("h3",{attrs:{id:"edit-the-etc-pam-d-common-session-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edit-the-etc-pam-d-common-session-file","aria-hidden":"true"}},[a._v("#")]),a._v(" Edit the "),t("code",[a._v("/etc/pam.d/common-session")]),a._v(" file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" /etc/pam.d/common-session\n")])])]),t("p",[a._v("add this line:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("session required pam_limits.so\n")])])]),t("p",[a._v("Save and close the file.")]),a._v(" "),t("p",[a._v("We are done. Now let's stop all our wallet daemons safely with RPC commands and reboot the server using "),t("code",[a._v("sudo reboot")]),a._v(" or "),t("code",[a._v("sudo shutdown -r")]),a._v(" command.")]),a._v(" "),t("h3",{attrs:{id:"check-the-values-now"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-the-values-now","aria-hidden":"true"}},[a._v("#")]),a._v(" Check the values now")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ulimit")]),a._v(" -n\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"create-start-script"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-start-script","aria-hidden":"true"}},[a._v("#")]),a._v(" Create "),t("code",[a._v("start")]),a._v(" Script")]),a._v(" "),t("p",[a._v("We need a "),t("code",[a._v("start")]),a._v(" script in the home dir to start Komodo, assetchains and all 3rd party coin daemons with the "),t("code",[a._v("-pubkey")]),a._v(" option. "),t("code",[a._v("-pubkey")]),a._v(" is not required for BTC daemon. All other coins need it. Here is an example of a start script :")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("source")]),a._v(" ~/komodo/src/pubkey.txt\nbitcoind "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nchipsd -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\ngamecreditsd -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\neinsteiniumd -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\ngincoind -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/VerusCoin/src/verusd -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/hush3/src/hushd -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" 60\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" komodo/src\n./komodod -gen -genproclimit"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1 -notary -pubkey"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" 600\n./assetchains\n")])])]),t("p",[a._v("Make the file executable:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x start\n")])])]),t("h3",{attrs:{id:"execute-the-script"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#execute-the-script","aria-hidden":"true"}},[a._v("#")]),a._v(" Execute the script")]),a._v(" "),t("p",[a._v("This may take upto 20-30 minutes maximum depending on your system spec.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~\n./start\n")])])]),t("p",[t("strong",[a._v("Make sure all daemons started properly before starting iguana in the next step.")])]),a._v(" "),t("h2",{attrs:{id:"start-iguana"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-iguana","aria-hidden":"true"}},[a._v("#")]),a._v(" Start "),t("code",[a._v("iguana")])]),a._v(" "),t("p",[a._v("Once all required daemons are running, we have funds on all coins, we can go ahead and start "),t("code",[a._v("iguana")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/SuperNET/iguana\n./m_notary\n")])])]),t("p",[t("code",[a._v("m_notary")]),a._v(" script will issue a "),t("code",[a._v("git pull")]),a._v(" command to update the repo, remove old iguana, compile fresh and start all the process. This can take about 10 minutes maximum to finish. You will see "),t("code",[a._v("INIT with 64 notaries")]),a._v(" once the process finishes.")]),a._v(" "),t("h2",{attrs:{id:"start-dpow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-dpow","aria-hidden":"true"}},[a._v("#")]),a._v(" Start dPoW")]),a._v(" "),t("p",[a._v("After you see "),t("code",[a._v("INIT with 64 notaries")]),a._v(", you can safely start dPoW process. Just issue the following command from inside "),t("code",[a._v("iguana")]),a._v(" dir to start with it.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./dpowassets\n")])])]),t("p",[a._v("Iguana should split your utxos automatically. If you want to test or split manually, you can follow "),t("router-link",{attrs:{to:"/notary/split-utxo-for-notarization.html"}},[a._v("this guide")]),a._v(".")],1)])},[],!1,null,null,null);s.default=n.exports}}]);